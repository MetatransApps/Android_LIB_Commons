package org.metatrans.commons.sfx;


import android.media.AudioAttributes;
import android.media.MediaPlayer;

import org.metatrans.commons.app.Application_Base;
import org.metatrans.commons.cfg.sound.IConfigurationSound;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/*
 * In summary, calling MediaPlayer.create() multiple times is generally efficient,
 * but it's important to manage your MediaPlayer instances properly,
 * release them when you're done, and consider reusing instances when it makes sense
 * for your specific use case to avoid resource and performance issues.
 * So, playSound(int sound_res_id) is not caching instances
 * and MediaPlayer createPlayerForSound(int sound_res_id) can be used for caching instances.
 * When use createPlayerForSound and cache its instances, mediaPlayer.release() have to be called for the instances when finished with them.
 */
public class SFXManager_BaseImpl implements ISFXManager {


    private static SFXManager_BaseImpl singleton;

    private static Map<Integer, List<MediaPlayer>> MEDIA_PLAYERS = new HashMap<Integer, List<MediaPlayer>>();


    public static ISFXManager getSingleton() {

        if (singleton == null) {

            singleton = new SFXManager_BaseImpl();
        }

        return singleton;
    }


    private SFXManager_BaseImpl() {

    }


    @Override
    public void playSound(int sound_res_id) {

        //-1 is just marking places in code, where the sfx should be played
        /*if (DEBUG && sound_res_id == -1) {

            return;
        }*/

        if (Application_Base.getInstance().getUserSettings().common_sound_cfg_id == IConfigurationSound.CFG_SOUND_OFF) {

            return;
        }

        final MediaPlayer mediaPlayer = createOrReusePlayerByResID(sound_res_id);

        mediaPlayer.start();
    }


    private MediaPlayer createOrReusePlayerByResID(int sound_res_id) {


        synchronized (MEDIA_PLAYERS) {

            List<MediaPlayer> players_list = MEDIA_PLAYERS.get(sound_res_id);

            if (players_list == null) {

                players_list = new ArrayList<MediaPlayer>();
                MEDIA_PLAYERS.put(sound_res_id, players_list);
            }

            if (players_list.size() == 0) {

                MediaPlayer player = MediaPlayer.create(Application_Base.getInstance(), sound_res_id);

                player.setAudioAttributes(new AudioAttributes.Builder()
                        .setUsage(AudioAttributes.USAGE_GAME)
                        .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                        .build());

                player.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mp) {

                        synchronized (MEDIA_PLAYERS) {

                            List<MediaPlayer> players_list = MEDIA_PLAYERS.get(sound_res_id);
                            players_list.add(mp);
                        }
                    }
                });

                return player;
            }

            MediaPlayer cached = players_list.remove(players_list.size() - 1);

            cached.seekTo(0);

            return cached;
        }
    }


    /*@Override
    public MediaPlayer createPlayerForSound(int sound_res_id) {

        final MediaPlayer mediaPlayer = createOrReusePlayerByResID(sound_res_id);

        mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mp) {

                mediaPlayer.stop();
                mediaPlayer.reset();
            }
        });

        return mediaPlayer;
    }*/
}
